		public static function drawTextOnFoo($pad = 0)
		{
			if (self::$curve > 0)
			{
				$s = 180;
				$e = 360;
			}
			else
			{
				$s = 0;
				$e = 180;
			}
			$cx = 1;
			$cy = 1;
			$tr = imagecolorallocatealpha(self::$image, 0, 0, 0, 127);
			$tlen = Tools::strlen(self::$text);
			$arccentre = ($e + $s) / 2;
			$txt_size = self::calculateTextBox(self::$text, self::$font, self::$size, 0);
			$c = self::$curve;

			$total_width = ((int)$txt_size['width']) - ($tlen - 1) * $pad;

			$bounds = array();
			if (self::$trace)
				$red = imagecolorallocate(self::$image, 0xFF, 0, 0);
			$text_width = 0;
			self::$text = utf8_decode(self::$text);
			for ($i = 0; $i < $tlen; $i++)
			{
				$ch = self::$text{$i};

				$measure = self::preciseMeasure($ch, self::$font, self::$size, 1);
				$angle = 0;

				$box = self::imagettftext(self::$image, self::$size, $angle, $tx, $ty, self::$color, self::$font, $ch, 1);
				$width = $measure['w'] - $box['x_correction'];
				$text_width += $width;
				$box_w = $box['rect']['width'];
				$box_h = $box['rect']['height'];

				$space = $box_w + $box_h;
				$bounds['min_h'] = isset($bounds['min_h']) ? min($box_h, $bounds['min_h']):$box_h;
				$bounds['max_h'] = isset($bounds['max_h']) ? max($box_h, $bounds['max_h']):$box_h;
				$bounds['min_x'] = isset($bounds['min_x']) ? min($tx - $space, $bounds['min_x']):$tx - $space;
				$bounds['min_y'] = isset($bounds['min_y']) ? min($ty - $space, $bounds['min_y']):$ty - $space;
				$bounds['max_x'] = isset($bounds['max_x']) ? max($tx + $space, $bounds['max_x']):$tx + $space;
				$bounds['max_y'] = isset($bounds['max_y']) ? max($ty + $space, $bounds['max_y']):$ty + $space;

			}

			$redraw = true;
			if ($bounds['min_x'] < 0)
			{
				$redraw = true;
				$correction = ceil(abs($bounds['min_x']));
				$bounds['min_x'] += $correction;
				$bounds['max_x'] += $correction;
				$cx += $correction;
			}
			if ($bounds['min_y'] < 0)
			{
				$redraw = true;
				$correction = ceil(abs($bounds['min_y']));
				$bounds['min_y'] += $correction;
				$bounds['max_y'] += $correction;
				$cy += $correction;
			}

			if ($bounds['min_x'] > 100)
			{
				$correction = floor($bounds['min_x'] - 100);
				$bounds['min_x'] = 100;
				$bounds['max_x'] -= $correction;
				$cx -= $correction;
			}

			if ($bounds['min_y'] > 100)
			{
				$correction = floor($bounds['min_y'] - 100);
				$bounds['min_y'] = 100;
				$bounds['max_y'] -= $correction;
				$cy -= $correction;
			}

			$total_width = $text_width - ($tlen - 1) * $pad;

			if ($redraw)
			{
				imagedestroy(self::$image);
				$w = ceil(abs($bounds['max_x'] - $bounds['min_x']));
				$h = ceil(abs($bounds['max_y'] - $bounds['min_y']));
				if ($w < $bounds['max_x'])
					$w = ceil($bounds['max_x']) + 10;
				if ($h < $bounds['max_y'])
					$h = ceil($bounds['max_y']) + 10;
				self::$image = imagecreatetruecolor($w, $h);

				imagefill(self::$image, 0, 0, $tr);
				imagealphablending(self::$image, 0);
				imagesavealpha(self::$image, 1);
				if (self::$trace)
				{
					imagecolordeallocate(self::$image, $red);
				}

				for ($i = 0; $i < $tlen; $i++)
				{
					$ch = self::$text{$i};
					if (self::$curve > 0)
						$bounds['min_h'] = 0;
					$measure = self::preciseMeasure($ch, self::$font, self::$size, 1);
					$box = self::imagettftext(self::$image, self::$size, $angle, $tx, $ty, self::$color, self::$font, $ch);
					$width = $measure['w'] - $box['x_correction'];
				}
				return self::imagetrim(self::$image, $tr);
			}
			return self::imagetrim(self::$image, $tr);
		}
